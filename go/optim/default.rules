--
-- Default optimisation rules for production code.
-- Only 'known good' rules should be include here.
--

let

    min a b = if a < b then a else b
    max a b = if a > b then a else b

    all f ls = and (map f ls)
    any f ls = or (map f ls)

    rSlice l = sliceFromOW l.rOffset l.width
    wSlice l = sliceFromOW l.wOffset l.width

    -- Specifies the link type.
    isTokenLink l = l.width == 0
    isDataLink l = l.width /= 0

    -- Specifies that slice B is a narrowing subset of slice A.
    isSubSlice sliceA sliceB =
        (sliceA.offset <= sliceB.offset) &&
        ((sliceA.offset + sliceA.width) >= (sliceB.offset + sliceB.width))

    -- Specifies that slice B is the same as slice A.
    isSameSlice sliceA sliceB =
        (sliceA.offset == sliceB.offset) &&
        (sliceA.width == sliceB.width)

    -- Specifies that slice B and slice A are adjacent or overlapping.
    isContiguousSlice sliceA sliceB =
        ((sliceA.offset + sliceA.width) >= sliceB.offset) ||
        ((sliceB.offset + sliceB.width) >= sliceA.offset)

    -- Determines the offset of a contiguous combined slice.
    contiguousOffset sliceA sliceB =
        min sliceA.offset sliceB.offset

    -- Determines the width of a contiguous combined slice.
    contiguousWidth sliceA sliceB =
        (max (sliceA.offset + sliceA.width) (sliceB.offset + sliceB.width)) -
        (min sliceA.offset sliceB.offset)

--
-- This rule set strips out redundant single input to single output flow
-- control components.
--
rule fal "remove F aliases"
    from
        f1: F (i, [o])
    when
        o.fOffset == 0 && i.width == o.width
    alias i => o

rule sal "remove S aliases"
    from
        s1: S (i, [o])
    when
        i.width == o.width
    alias i => o

rule jal "remove J aliases"
    from
        j1: J ([i], o)
    alias i => o

rule mal "remove M aliases"
    from
        m1: M ([i], o)
    alias i => o

--
-- This rule set performs merging of multiple adjacent 'narrow' flow control
-- components into a single 'wide' flow control component.
--
rule ff "collapse connected Fs"
    from
        f1: F (_, [...,i,...])
        f2: F (i, f2o)
    to
        f1: F (_, [...,f2o',...])
    where
        f2o' = f2o { fOffset = if width == 0 then 0 else fOffset + i.fOffset }

rule mm "collapse connected Ms"
    from
        m1: M ([...,i,...], _)
        m2: M (mi, i)
    to
        m1: M ([...,mi,...], _)

rule jj "collapse connected Js"
    from
        j1: J ([...,i,...], _)
        j2: J (ji, i)
    to
        j1: J ([...,ji,...], _)

--
-- This rule set trims the output widths of various components when followed
-- by a narrowing single output fork.
--
rule nsf "narrow S outputs"
    from
        s1: S (_, [...,i,...])
        f1: F (i, [j])
    to
        s1: S (_, [...,j',...])
    where
        j' = j { sImps = i.sImps, sOffset = i.sOffset + j.fOffset }

--
-- This rule merges identical directly connected steer/merge links.
--
rule sm "merge shared S-M links"
    from
        s1: S (_, [...,i,...,j,...])
        m1: M ([...,i,...,j,...], _) permute (i, j)
    when
        i.width == j.width &&
        i.sOffset == j.sOffset
    to
        s1: S (_, [k,...,...,...])
        m1: M ([k,...,...,...], _)
    where
        k = newlink { width = i.width, sImps = i.sImps ++ j.sImps, sOffset = i.sOffset }

--
-- Remove redundant indirect F-J token links (token link first).
--
rule fji1 "remove redundant F-J token links"
    from
        f1: F (_, [...,i,...,j,...]) permute (i, j)
        j1: J ([...,i,...,jd,...], _)
        j -|-> jd
    when
        isTokenLink i
    to
        f1: F (_, [...,...,j,...])
        j1: J ([...,...,jd,...], _)

--
-- Remove redundant indirect F-J token links (token link second).
--
rule fji2 "remove redundant F-J token links"
    from
        f1: F (_, [...,j,...,i,...]) permute (i, j)
        j1: J ([...,jd,...,i,...], _)
        j -|-> jd
    when
        isTokenLink i
    to
        f1: F (_, [...,j,...,...])
        j1: J ([...,jd,...,...], _)

--
-- Push control line forks back to operator inputs.
--
rule fo "move Fs through Os"
    from
        o1: O (oi, oo)
        f1: F (oo, [fol:...,fo,for:...])
    when
        isTokenLink fo &&
        fol ++ for /= []
    to
        o1: O (oi', oo)
        f1: F (oo, [fol,for])
        f2: F (oi, [oi',fo])
    where
        oi' = newlink { width = oi.width, fOffset = 0 }

--
-- These rules convert cascaded variable reads into parallel accesses on the
-- same variable.
--
rule vrrc1 "parallelise reads on same V"
    from
        v1: V ([wgs:...], _, [rgl:...,rg1,rgm:...,rg2,...], [rdl:...,rd1,rdm:...,rd2,...])
        f1: F (rd1, [fol:...,fo,for:...])
        fo -|-> rg2 excluding (wgs)
    when
        length rgl == length rdl &&
        length rgm == length rdm &&
        isTokenLink fo &&
        fol ++ for /= []
    to
        v1: V ([wgs], _, [rgl,rg1',rgm,rg2,...], [rdl,rd1,rdm,rd2,...])
        f1: F (rd1, [fol,for])
        f2: F (rg1, [rg1',fo])
    where
        rg1' = newlink { width = 0, fOffset = 0 }

rule vrrc2 "parallelise reads on same V"
    from
        v1: V ([wgs:...], _, [rgl:...,rg2,rgm:...,rg1,...], [rdl:...,rd2,rdm:...,rd1,...])
        f1: F (rd1, [fol:...,fo,for:...])
        fo -|-> rg2 excluding (wgs)
    when
        length rgl == length rdl &&
        length rgm == length rdm &&
        isTokenLink fo &&
        fol ++ for /= []
    to
        v1: V ([wgs], _, [rgl,rg2,rgm,rg1',...], [rdl,rd2,rdm,rd1,...])
        f1: F (rd1, [fol,for])
        f2: F (rg1, [rg1',fo])
    where
        rg1' = newlink { width = 0, fOffset = 0 }

--
-- This rule converts cascaded variable reads into parallel accesses on
-- independent variables.
--
rule vrrc3 "parallelise reads on different Vs"
    from
        v1: V ([wgs1:...], _, [rg1l:...,rg1,...], [rd1l:...,rd1,...])
        f1: F (rd1, [fol:...,rg2,for:...])
        v2: V ([wgs2:...], _, [rg2l:...,rg2,...], [rd2l:...,rd2,...])
    when
        length rg1l == length rd1l &&
        length rg2l == length rd2l &&
        fol ++ for /= []
    to
        v1: V ([wgs1], _, [rg1l,rg1',...], [rd1l,rd1,...])
        v2: V ([wgs2], _, [rg2l,rg2,...], [rd2l,rd2,...])
        f1: F (rd1, [fol,for])
        f2: F (rg1, [rg1',rg2])
    where
        rg1' = newlink { width = 0, fOffset = 0 }

--
-- Push control line forks back to join inputs (2 input version).
--
rule fcj "move control F's through J's"
    from
        j1: J ([ji1,ji2], jo)
        f1: F (jo, [fol:...,fo,for:...])
    when
        isTokenLink fo &&
        fol ++ for /= []
    to
        f2: F (ji1, [fo1,ji1f])
        f3: F (ji2, [fo2,ji2f])
        j1: J ([ji1f,ji2f], jo)
        f1: F (jo, [fol,for])
        j2: J ([fo1,fo2], fo)
    where
        fo1 = newlink { width = 0, fOffset = 0 }
        fo2 = newlink { width = 0, fOffset = 0 }
        ji1f = newlink { width = ji1.width, fOffset = 0 }
        ji2f = newlink { width = ji2.width, fOffset = 0 }

--
-- Push control line joins forward to operator outputs.
--
rule jo "move Js through Os"
    from
        j1: J ([jil:...,ji,jir:...], oi)
        o1: O (oi, oo)
    when
        isTokenLink ji &&
        jil ++ jir /= []
    to
        j1: J ([jil,jir], oi)
        o1: O (oi, oo')
        j2: J ([oo',ji], oo)
    where
        oo' = newlink { width = oo.width }

--
-- This rule removes variable read ports where the 'read go' is indirectly
-- connected to the 'write done'.
--
rule tvn "trim V read ports"
    from
        v1: V ([wgl:...,wg,wgr:...], [wdl:...,wd,...], [rgl:...,rg,rgr:...], [rdl:...,rd,...])
        wd -|-> rg excluding (wgl,wg,wgr)
    when
        length wgl == length wdl &&
        length rgl == length rdl &&
        isSubSlice (wSlice wg) (rSlice rd) &&
        rgl ++ rgr /= []
    to
        f1: F (wg, [wgf,rdf])
        v1: V ([wgl,wgf,wgr], [wdl,wdv,...], [rgl,rgr], [rdl,...])
        j1: J ([rdf,rg,wdf], rd)
        f2: F (wdv, [wd',wdf])
    where
        wdv = newlink { width = 0 }
        wdf = newlink { width = 0, fOffset = 0 }
        wd' = wd { fOffset = 0 }
        wgf = newlink { width = wg.width, fOffset = 0, wOffset = wg.wOffset }
        rdf = newlink { width = rd.width, fOffset = (rd.rOffset - wg.wOffset) }

--
-- This rule removes variables with a single write port and single read port
-- where the 'read go' is indirectly connected to the 'write done'. Such a
-- situation arises when intermediate variables are used in a calculation.
-- Leaves a parallel fork/join control path in the dataflow graph which may
-- then be optimised out.
--
rule svi "remove indirect `buffer' Vs"
    from
        v: V ([wg], [wd], [rg], [rd])
        wd -|-> rg excluding (wg)
    when
        isSubSlice (wSlice wg) (rSlice rd)
    to
        f1: F (wg, [wd', rd'])
        j1: J ([rd', rg], rd)
    where
        wd' = wd { fOffset = 0 }
        rd' = newlink { width = rd.width, fOffset = (rd.rOffset - wg.wOffset) }

--
-- This rule combines variable write ports which are immediately followed by
-- a write done merge. This configuration is generated when a variable is
-- assigned different values under different conditional branches.
--
rule vmw "combine merged V write ports"
    from
        v1: V ([wgl:...,wg1,wgm:...,wg2,...], [wdl:...,wd1,wdm:...,wd2,...], _, _)
        m1: M ([...,wd1,...,wd2,...], _) permute (wd1, wd2)
    when
        length wgl == length wdl &&
        length wgm == length wdm &&
        isSameSlice (wSlice wg1) (wSlice wg2)
    to
        v1: V ([wgl,wg',wgm,...], [wdl,wd1,wdm,...], _, _)
        m1: M ([...,wd1,...,...], _)
        m2: M ([wg1,wg2], wg')
    where
        wg' = newlink { width = wg1.width, wOffset = wg1.wOffset }

--
-- This rule pushes select operations through variable read ports, which will
-- allow common reads on different conditional branches to be merged.
--
rule vsr "move Ss through V reads"
    from
        s1: S (si, [sol:...,rg,sor:...])
        v1: V (_, _, [rgl:...,rg,rgr:...], [rdl:...,rd,rdr:...])
    when
        length rgl == length rdl &&
        length rgl + length rgr < 7
    to
        f1: F (si, [sij,rg'])
        v1: V (_, _, [rgl,rg',rgr], [rdl,rdj,rdr])
        j1: J ([sij,rdj], si')
        s1: S (si', [sol,sor,rd'])
    where
        rg' = rg { fOffset = 0 }
        sij = newlink { width = si.width, fOffset = 0 }
        rdj = newlink { width = rd.width, rOffset = rd.rOffset }
        si' = newlink { width = si.width + rd.width }
        rd' = rd { sOffset = si.width, sImps = rg.sImps }

--
-- This rule pushes select operations through variable read ports, where the
-- variable read operation is triggered by a data fork, which will allow loop
-- termination tests to be optimised. This works by appending the read data
-- to the select input, so can only be applied to the select output slice
-- which occupies the upper bit positions of the select input.
--
rule vsrf1 "move Ss through forked V reads"
    from
        s1: S (si, [sol:...,so,sor:...])
        f1: F (so, [fol:...,rg,for:...])
        v1: V (_, _, [rgl:...,rg,...], [rdl:...,rd,...])
    when
        isDataLink so &&
        so.sOffset + so.width == si.width &&
        length rgl == length rdl
    to
        f2: F (si, [sij,rg'])
        v1: V (_, _, [rgl,rg',...], [rdl,rdj,...])
        j1: J ([sij,rdj], si')
        s1: S (si', [sol,sor,so'])
        f1: F (so', [fol,for,rd'])
    where
        rg' = rg { fOffset = 0 }
        sij = newlink { width = si.width, fOffset = 0 }
        rdj = newlink { width = rd.width, rOffset = rd.rOffset }
        si' = newlink { width = si.width + rd.width }
        so' = newlink { width = so.width + rd.width, sOffset = so.sOffset, sImps = so.sImps }
        rd' = rd { fOffset = so.width }

--
-- This rule pushes select operations through variable read ports, where the
-- variable read operation is triggered by a control fork, which will allow
-- common reads on different conditional branches to be merged.
--
rule vsrf2 "move Ss through forked V reads"
    from
        s1: S (si, [sol:...,so,sor:...])
        f1: F (so, [fol:...,rg,for:...])
        v1: V (_, _, [rgl:...,rg,...], [rdl:...,rd,...])
    when
        isTokenLink so &&
        length rgl == length rdl
    to
        f2: F (si, [sij,rg'])
        v1: V (_, _, [rgl,rg',...], [rdl,rdj,...])
        j1: J ([sij,rdj], si')
        s1: S (si', [sol,sor,so'])
        f1: F (so', [fol,for,rd'])
    where
        rg' = rg { fOffset = 0 }
        sij = newlink { width = si.width, fOffset = 0 }
        rdj = newlink { width = rd.width, rOffset = rd.rOffset }
        si' = newlink { width = si.width + rd.width }
        so' = newlink { width = rd.width, sOffset = si.width, sImps = so.sImps }
        rd' = rd { fOffset = 0 }

--
-- This rule combines variable read ports which form a contiguous slice and
-- which are accessed in parallel.
--
rule vcr "combine parallel V read ports"
    from
        f1: F (_, [fol:...,rg1,fom:...,rg2,...]) permute (rg1, rg2)
        v1: V (_, _, [rgl:...,rg1,rgm:...,rg2,...], [rdl:...,rd1,rdm:...,rd2,...])
    when
        length rgl == length rdl &&
        length rgm == length rdm &&
        isContiguousSlice (rSlice rd1) (rSlice rd2)
    to
        f1: F (_, [fol,rg1,fom,...])
        v1: V (_, _, [rgl,rg1,rgm,...], [rdl,rd',rdm,...])
        f2: F (rd', [rd1',rd2'])
    where
        rdWidth = contiguousWidth (rSlice rd1) (rSlice rd2)
        rdOffset = contiguousOffset (rSlice rd1) (rSlice rd2)
        rd' = newlink { width = rdWidth, rOffset = rdOffset }
        rd1' = rd1 { fOffset = rd1.rOffset - rdOffset }
        rd2' = rd2 { fOffset = rd2.rOffset - rdOffset }

--
-- This rule splits out joined token and data signals into independent merge
-- components, pushing the token and data join components to their output.
--
rule jms "split token and data Ms"
    from
        m1: M ([...,mi1,...,mi2,...], mo)
        j1: J ([jl1:...,i,jr1:...], mi1)
        j2: J ([jl2:...,j,jr2:...], mi2)
    when
        isTokenLink i &&
        isTokenLink j &&
        jl1 ++ jr1 /= [] &&
        jl2 ++ jr2 /= []
    to
        m1: M ([...,jo,...,...], mo)
        j1: J ([jl1,jr1], mi1)
        j2: J ([jl2,jr2], mi2)
        m2: M ([i,j], mo1)
        m3: M ([mi1,mi2], mo2)
        j3: J ([mo1,mo2], jo)
    where
        mo1 = newlink { width = 0 }
        mo2 = newlink { width = mo.width }
        jo = newlink { width = mo.width }

--
-- These rules move variable reads that are triggered by a write on another
-- variable so that they occur in parallel with the variable write operation.
--
rule vwrp "parallelise V writes and V reads"
    from
        v1: V ([wgl:...,wg,...], [wdl:...,wd,...], _, _)
        v2: V (_, _, [rgl:...,wd,...], [rdl:...,rd,...])
    when
        length wgl == length wdl &&
        length rgl == length rdl
    to
        f1: F (wg, [rg, wg'])
        v1: V ([wgl,wg',...], [wdl,wd,...], _, _)
        v2: V (_, _, [rgl,rg,...], [rdl,rd',...])
        j1: J ([wd,rd'], rd)
    where
        rg = newlink { width = 0, fOffset = 0 }
        wg' = newlink { width = wg.width, wOffset = wg.wOffset, fOffset = 0 }
        rd' = newlink { width = rd.width, rOffset = rd.rOffset }

rule vwrp "parallelise V writes and forked V reads"
    from
        v1: V ([wgl:...,wg,...], [wdl:...,wd,...], _, _)
        f1: F (wd, [...,fo,...])
        v2: V (_, _, [rgl:...,fo,...], [rdl:...,rd,...])
    when
        length wgl == length wdl &&
        length rgl == length rdl &&
        isTokenLink fo
    to
        f2: F (wg, [rg, wg'])
        v1: V ([wgl,wg',...], [wdl,wd,...], _, _)
        f1: F (wd, [...,fo,...])
        v2: V (_, _, [rgl,rg,...], [rdl,rd',...])
        j1: J ([fo,rd'], rd)
    where
        rg = newlink { width = 0, fOffset = 0 }
        wg' = newlink { width = wg.width, wOffset = wg.wOffset, fOffset = 0 }
        rd' = newlink { width = rd.width, rOffset = rd.rOffset }

--
-- These rules move constant generation that is triggered by a variable write
-- completion so that it occurs in parallel with the variable write operation.
-- Works for any operators which convert a control path input into a data path
-- output.
--
rule vwcp "parallelise V writes and O constant generation"
    from
        v1: V ([wgl:...,wg,...], [wdl:...,wd,...], _, _)
        o1: O (wd, oo)
    when
        length wgl == length wdl
    to
        f1: F (wg, [oi, wg'])
        v1: V ([wgl,wg',...], [wdl,wd,...], _, _)
        o1: O (oi, oo')
        j1: J ([wd,oo'], oo)
    where
        oi = newlink { width = 0, fOffset = 0 }
        wg' = newlink { width = wg.width, wOffset = wg.wOffset, fOffset = 0 }
        oo' = newlink { width = oo.width }

rule vwcpf "parallelise V writes and forked O constant generation"
    from
        v1: V ([wgl:...,wg,...], [wdl:...,wd,...], _, _)
        f1: F (wd, [...,fo,...])
        o1: O (fo, oo)
    when
        length wgl == length wdl &&
        isTokenLink fo
    to
        f2: F (wg, [oi, wg'])
        v1: V ([wgl,wg',...], [wdl,wd,...], _, _)
        f1: F (wd, [...,fo,...])
        o1: O (oi, oo')
        j1: J ([fo,oo'], oo)
    where
        oi = newlink { width = 0, fOffset = 0 }
        wg' = newlink { width = wg.width, wOffset = wg.wOffset, fOffset = 0 }
        oo' = newlink { width = oo.width }

--
-- This rule moves constant generation that is triggered by a variable read
-- completion so that it occurs in parallel with the variable read operation.
--
rule vrcp "parallelise V reads and O constant generation"
    from
        v1: V (_, _, [rgl:...,rg,...], [rdl:...,rd,...])
        f1: F (rd, [...,fo,...])
        o1: O (fo, oo)
    when
        length rgl == length rdl &&
        isTokenLink fo
    to
        f2: F (rg, [oi, rg'])
        v1: V (_, _, [rgl,rg',...], [rdl,rd,...])
        f1: F (rd, [...,fo,...])
        o1: O (oi, oo')
        j1: J ([fo,oo'], oo)
    where
        oi = newlink { width = 0, fOffset = 0 }
        rg' = newlink { width = 0, fOffset = 0 }
        oo' = newlink { width = oo.width }

--
-- This rule discards any non-sideffecting operator where its result
-- is discarded
--
rule of "remove o -> control f"
    from
        o1: O (oi, oo)
        f1: F (oo, [fo:...])
    when
        all isTokenLink fo &&
        not (any isBuiltinCall o1.terms)
    to
        f2: F (oi, [fo])
